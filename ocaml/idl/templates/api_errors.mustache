---
 layout: doc
---

# Error Handling

When a low-level transport error occurs, or a request is malformed at the HTTP
or RPC level, the server may send an HTTP 500 error response, or the client
may simulate the same. The client must be prepared to handle these errors,
though they may be treated as fatal.

For example, the following malformed request when using the XML-RPC protocol:

```sh
$curl -D - -X POST https://server -H 'Content-Type: application/xml' \
> -d '<?xml version="1.0"?>
> <methodCall>
>   <methodName>session.logout</methodName>
> </methodCall>'
```

results to the following response:

```sh
HTTP/1.1 500 Internal Error
content-length: 297
content-type:text/html
connection:close
cache-control:no-cache, no-store

<html><body><h1>HTTP 500 internal server error</h1>An unexpected error occurred;
 please wait a while and try again. If the problem persists, please contact your
 support representative.<h1> Additional information </h1>Xmlrpc.Parse_error(&quo
t;close_tag&quot;, &quot;open_tag&quot;, _)</body></html>
```

When using the JSON-RPC protocol:

```sh
$curl -D - -X POST https://server/jsonrpc -H 'Content-Type: application/json' \
> -d '{
>     "jsonrpc": "2.0",
>     "method": "session.login_with_password",
>     "id": 0
> }'
```

the response is:

```sh
HTTP/1.1 500 Internal Error
content-length: 308
content-type:text/html
connection:close
cache-control:no-cache, no-store

<html><body><h1>HTTP 500 internal server error</h1>An unexpected error occurred;
 please wait a while and try again. If the problem persists, please contact your
 support representative.<h1> Additional information </h1>Jsonrpc.Malformed_metho
d_request(&quot;{jsonrpc=...,method=...,id=...}&quot;)</body></html>
```

All other failures are reported with a more structured error response, to
allow better automatic response to failures, proper internationalization of
any error message, and easier debugging.

On the wire, these are transmitted like this when using the XML-RPC protocol:

```xml
<struct>
    <member>
        <name>Status</name>
        <value>Failure</value>
    </member>
    <member>
        <name>ErrorDescription</name>
        <value>
            <array>
                <data>
                    <value>MAP_DUPLICATE_KEY</value>
                    <value>Customer</value>
                    <value>eSpiel Inc.</value>
                    <value>eSpiel Incorporated</value>
                </data>
            </array>
        </value>
    </member>
</struct>
```

Note that `ErrorDescription` value is an array of string values. The
first element of the array is an error code; the remainder of the array are
strings representing error parameters relating to that code.  In this case,
the client has attempted to add the mapping _Customer &#45;&gt;
eSpiel Incorporated_ to a Map, but it already contains the mapping
_Customer &#45;&gt; eSpiel Inc._, hence the request has failed.

When using the JSON-RPC protocol v2.0, the above error is transmitted as:

```json
{
    "jsonrpc": "2.0",
    "error": {
        "code": 1,
        "message": "MAP_DUPLICATE_KEY",
        "data": [
            "Customer",
            "eSpiel Inc.",
            "eSpiel Incorporated"
        ]
    },
    "id": 3
}
```

Finally, when using the JSON-RPC protocol v1.0:

```json
{
    "result": null,
    "error": [
        "MAP_DUPLICATE_KEY",
        "Customer",
        "eSpiel Inc.",
        "eSpiel Incorporated"
    ],
    "id": "xyz"
}
```

Each possible error code is documented in the following section.

## Error Codes
{{#errors}}

### {{{error_code}}}

{{{error_description}}}

_Signature:_

```
{{{error_code_unescaped}}}({{parameters}})
```
{{/errors}}